generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Sex {
  Male
  Female
  LGBTQ_Plus
  Undefined
}

enum HoroscopeSector {
  love
  work
  study
  money
  luck
  family
}

enum BookingStatus {
  SCHEDULED
  COMPLETED
  FAILED
}

enum TransactionStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportType {
  Course_issue
  Prophet_issue
  Payment_issue
  Website_issue
  Other
}

enum ReportStatus {
  PENDING
  FIXING
  DONE
}

enum ZodiacSign {
  aries
  taurus
  gemini
  cancer
  leo
  virgo
  libra
  scorpio
  sagittarius
  capricorn
  aquarius
  pisces
}

enum Bank {
  BBL
  KTB
  KBANK
  SCB
  BAY
  TTB
  CIMB
  UOB
  GSB
  BAAC
}

enum Role {
  prophet
  customer
  admin
}

// MODELS
model Account {
  id           String @id @db.VarChar(16)
  email        String @unique @db.VarChar(100)
  username     String @unique @db.VarChar(30)
  passwordHash String @map("password_hash") @db.VarChar(72)
  role         Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDetail UserDetail?
  customer   Customer?
  prophet    Prophet?
  admin      Admin?
}

model UserDetail {
  id          Int     @id @default(autoincrement())
  accountId   String  @unique @db.VarChar(16)
  name        String  @db.VarChar(45)
  lastname    String  @db.VarChar(45)
  profileUrl  String? @map("profile_url")
  phoneNumber String  @map("phone_number") @db.VarChar(20)
  gender      Sex

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id])
}

model Customer {
  id         String     @id @db.VarChar(16)
  accountId  String     @unique @db.VarChar(16)
  birthDate  DateTime   @map("birth_date") @db.Date
  birthTime  DateTime   @map("birth_time") @db.Time
  zodiacSign ZodiacSign

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account  Account   @relation(fields: [accountId], references: [id])
  bookings Booking[]
  reviews  Review[]
  reports  Report[]
}

model Prophet {
  id        String @id @db.VarChar(16)
  accountId String @unique @db.VarChar(16)
  lineId    String @map("line_id") @db.VarChar(20)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account      Account               @relation(fields: [accountId], references: [id])
  availability ProphetAvailability[]
  methods      ProphetMethod[]
  courses      Course[]
  txAccounts   TransactionAccount[]
}

model ProphetAvailability {
  id        Int      @id @default(autoincrement())
  prophetId String   @db.VarChar(16)
  date      DateTime @db.Date
  startTime DateTime @map("start_time") @db.Time
  endTime   DateTime @map("end_time") @db.Time

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prophet Prophet @relation(fields: [prophetId], references: [id])

  @@index([prophetId, date])
}

model HoroscopeMethod {
  id   Int    @id @default(autoincrement())
  slug String @unique @db.VarChar(32)
  name String @db.VarChar(64)

  // master/lookup â†’ no audit fields
  prophetMethods ProphetMethod[]
  courses        Course[]
}

model ProphetMethod {
  prophetId String @db.VarChar(16)
  methodId  Int

  prophet Prophet         @relation(fields: [prophetId], references: [id])
  method  HoroscopeMethod @relation(fields: [methodId], references: [id])

  @@id([prophetId, methodId])
  @@index([methodId])
}

model Course {
  id                String          @id @db.VarChar(16)
  prophetId         String          @db.VarChar(16)
  courseName        String          @map("course_name") @db.VarChar(100)
  horoscopeMethodId Int             @map("horoscope_method_id")
  horoscopeSector   HoroscopeSector
  durationMin       Int             @map("duration_min")
  price             Decimal         @db.Decimal(7, 2)
  isActive          Boolean         @default(true) @map("is_active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prophet         Prophet         @relation(fields: [prophetId], references: [id])
  horoscopeMethod HoroscopeMethod @relation(fields: [horoscopeMethodId], references: [id])
  bookings        Booking[]
  reviews         Review[]

  @@index([prophetId])
  @@index([horoscopeMethodId])
  @@index([isActive])
}

model Booking {
  id         String        @id @db.VarChar(16)
  customerId String        @db.VarChar(16)
  courseId   String        @db.VarChar(16)
  startDate  DateTime      @map("start_datetime")
  endDate    DateTime      @map("end_datetime")
  createdAt  DateTime      @default(now()) @map("created_at")
  status     BookingStatus

  customer    Customer     @relation(fields: [customerId], references: [id])
  course      Course       @relation(fields: [courseId], references: [id])
  transaction Transaction?
  reviews     Review[]

  @@index([customerId])
  @@index([courseId])
  @@index([status])
}

model Transaction {
  id        String            @id @db.VarChar(16)
  bookingId String            @unique @db.VarChar(16)
  timestamp DateTime          @default(now())
  status    TransactionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

model TransactionAccount {
  id            String @id @db.VarChar(16)
  prophetId     String @db.VarChar(16)
  accountName   String @map("account_name") @db.VarChar(45)
  accountNumber String @map("account_number") @db.VarChar(20)
  bank          Bank

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prophet Prophet @relation(fields: [prophetId], references: [id])

  @@unique([prophetId, bank, accountNumber])
  @@index([prophetId])
}

model Review {
  id          String  @id @db.VarChar(16)
  customerId  String  @db.VarChar(16)
  bookingId   String  @db.VarChar(16)
  score       Int
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  booking  Booking  @relation(fields: [bookingId], references: [id])
  Course   Course?  @relation(fields: [courseId], references: [id])
  courseId String?  @db.VarChar(16)

  @@unique([customerId, bookingId])
  @@index([bookingId])
}

model Admin {
  id        String @id @db.VarChar(16)
  accountId String @unique @db.VarChar(16)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account  @relation(fields: [accountId], references: [id])
  reports Report[]
}

model Report {
  id           String       @id @db.VarChar(16)
  customerId   String       @db.VarChar(16)
  adminId      String?      @db.VarChar(16)
  reportType   ReportType
  topic        String       @db.VarChar(100)
  description  String
  reportStatus ReportStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  admin    Admin?   @relation(fields: [adminId], references: [id])

  @@index([reportStatus])
  @@index([reportType])
}
