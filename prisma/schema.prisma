datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Sex {
  MALE        @map("male")
  FEMALE      @map("female")
  LGBTQ_PLUS  @map("lgbtq_plus")
  UNDEFINED   @map("undefined")
}

enum HoroscopeSector {
  LOVE    @map("love")
  WORK    @map("work")
  STUDY   @map("study")
  MONEY   @map("money")
  LUCK    @map("luck")
  FAMILY  @map("family")
}

enum BookingStatus {
  SCHEDULED  @map("scheduled")
  COMPLETED  @map("completed")
  FAILED     @map("failed")
}

enum TransactionStatus {
  PROCESSING  @map("processing")
  COMPLETED   @map("completed")
  FAILED      @map("failed")
}

enum ReportType {
  COURSE_ISSUE   @map("course_issue")
  PROPHET_ISSUE  @map("prophet_issue")
  PAYMENT_ISSUE  @map("payment_issue")
  WEBSITE_ISSUE  @map("website_issue")
  OTHER          @map("other")
}

enum ReportStatus {
  PENDING  @map("pending")
  FIXING   @map("fixing")
  DONE     @map("done")
}

enum ZodiacSign {
  ARIES        @map("aries")
  TAURUS       @map("taurus")
  GEMINI       @map("gemini")
  CANCER       @map("cancer")
  LEO          @map("leo")
  VIRGO        @map("virgo")
  LIBRA        @map("libra")
  SCORPIO      @map("scorpio")
  SAGITTARIUS  @map("sagittarius")
  CAPRICORN    @map("capricorn")
  AQUARIUS     @map("aquarius")
  PISCES       @map("pisces")
}

enum Bank {
  BBL    @map("bbl")     // Bangkok Bank
  KTB    @map("ktb")     // Krungthai Bank
  KBANK  @map("kbank")   // Kasikorn Bank
  SCB    @map("scb")     // Siam Commercial Bank
  BAY    @map("bay")     // Krungsri
  TTB    @map("ttb")     // TMBThanachart
  CIMB   @map("cimb")    // CIMB Thai
  UOB    @map("uob")     // UOB Thai
  GSB    @map("gsb")     // Government Savings Bank
  BAAC   @map("baac")    // Bank for Agriculture
}

enum Role {
  PROPHET   @map("prophet")
  CUSTOMER  @map("customer")
  ADMIN     @map("admin")
}

// MODELS
model Account {
  id           String @id @db.VarChar(16) @map("id")
  email        String @unique @db.VarChar(100) @map("email")
  username     String @unique @db.VarChar(30) @map("username")
  passwordHash String @db.VarChar(72) @map("password_hash")
  role         Role   @map("role")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userDetail UserDetail?
  customer   Customer?
  prophet    Prophet?
  admin      Admin?

  @@map("account")
}

model UserDetail {
  id          Int     @id @default(autoincrement()) @map("id")
  accountId   String  @unique @db.VarChar(16) @map("account_id")
  name        String  @db.VarChar(45) @map("name")
  lastname    String  @db.VarChar(45) @map("lastname")
  profileUrl  String? @db.VarChar(255) @map("profile_url")
  phoneNumber String  @db.VarChar(20) @map("phone_number")
  gender      Sex     @map("gender")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_detail")
}

model Customer {
  id         String     @id @db.VarChar(16) @map("id")
  accountId  String     @unique @db.VarChar(16) @map("account_id")
  birthDate  DateTime   @db.Date @map("birth_date")
  birthTime  DateTime   @db.Time @map("birth_time")
  zodiacSign ZodiacSign @map("zodiac_sign")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookings Booking[]
  reviews  Review[]
  reports  Report[]

  @@map("customer")
}

model Prophet {
  id        String @id @db.VarChar(16) @map("id")
  accountId String @unique @db.VarChar(16) @map("account_id")
  lineId    String @db.VarChar(20) @map("line_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account      Account               @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  availability ProphetAvailability[]
  methods      ProphetMethod[]
  courses      Course[]
  bookings     Booking[]
  txAccounts   TransactionAccount[]

  @@map("prophet")
}

model ProphetAvailability {
  id        Int      @id @default(autoincrement()) @map("id")
  prophetId String   @db.VarChar(16) @map("prophet_id")
  date      DateTime @db.Date @map("date")
  startTime DateTime @db.Time @map("start_time")
  endTime   DateTime @db.Time @map("end_time")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prophet Prophet @relation(fields: [prophetId], references: [id])

  @@unique([prophetId, date, startTime, endTime])
  @@index([prophetId, date])

  @@map("prophet_availability")
}

model HoroscopeMethod {
  id   Int    @id @default(autoincrement()) @map("id")
  slug String @unique @db.VarChar(32) @map("slug")
  name String @db.VarChar(64) @map("name")

  prophetMethods ProphetMethod[]
  courses        Course[]

  @@map("horoscope_method")
}

model ProphetMethod {
  prophetId String @db.VarChar(16) @map("prophet_id")
  methodId  Int    @map("method_id")

  prophet Prophet         @relation(fields: [prophetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  method  HoroscopeMethod @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([prophetId, methodId])
  @@index([methodId])

  @@map("prophet_method")
}

model Course {
  id                String          @id @db.VarChar(16) @map("id")
  prophetId         String          @db.VarChar(16) @map("prophet_id")
  courseName        String          @db.VarChar(100) @map("course_name")
  horoscopeMethodId Int             @map("horoscope_method_id")
  horoscopeSector   HoroscopeSector @map("horoscope_sector")
  durationMin       Int             @map("duration_min")
  price             Decimal         @db.Decimal(7, 2) @map("price")
  isActive          Boolean         @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prophet         Prophet         @relation(fields: [prophetId], references: [id])
  horoscopeMethod HoroscopeMethod @relation(fields: [horoscopeMethodId], references: [id])
  bookings        Booking[]

  @@index([prophetId])
  @@index([horoscopeMethodId])

  @@map("course")
}

model Booking {
  id            String   @id @db.VarChar(16) @map("id")
  customerId    String   @db.VarChar(16) @map("customer_id")
  courseId      String   @db.VarChar(16) @map("course_id")
  prophetId     String   @db.VarChar(16) @map("prophet_id")
  startDateTime DateTime @map("start_datetime")
  endDateTime   DateTime @map("end_datetime")
  createdAt     DateTime @default(now()) @map("created_at")
  status        BookingStatus @map("status")

  customer    Customer     @relation(fields: [customerId], references: [id])
  course      Course       @relation(fields: [courseId], references: [id])
  prophet     Prophet      @relation(fields: [prophetId], references: [id])
  transaction Transaction?
  reviews     Review[]

  @@unique([prophetId, startDateTime, endDateTime])
  @@index([customerId])
  @@index([prophetId, startDateTime, endDateTime, status])

  @@map("booking")
}

model Transaction {
  id        String            @id @db.VarChar(16) @map("id")
  bookingId String            @unique @db.VarChar(16) @map("booking_id")
  status    TransactionStatus @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("transaction")
}

model TransactionAccount {
  id            String @id @db.VarChar(16) @map("id")
  prophetId     String @db.VarChar(16) @map("prophet_id")
  accountName   String @db.VarChar(45) @map("account_name")
  accountNumber String @db.VarChar(20) @map("account_number")
  bank          Bank   @map("bank")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prophet Prophet @relation(fields: [prophetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([prophetId, bank, accountNumber])
  @@index([prophetId])

  @@map("transaction_account")
}

model Review {
  id          String  @id @db.VarChar(16) @map("id")
  customerId  String  @db.VarChar(16) @map("customer_id")
  bookingId   String  @unique @db.VarChar(16) @map("booking_id")
  score       Int     @map("score")
  description String? @db.Text @map("description")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  booking  Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([bookingId])

  @@map("review")
}

model Admin {
  id        String @id @db.VarChar(16) @map("id")
  accountId String @unique @db.VarChar(16) @map("account_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reports Report[]

  @@map("admin")
}

model Report {
  id           String       @id @db.VarChar(16) @map("id")
  customerId   String       @db.VarChar(16) @map("customer_id")
  adminId      String?      @db.VarChar(16) @map("admin_id")
  reportType   ReportType   @map("report_type")
  topic        String       @db.VarChar(100) @map("topic")
  description  String       @db.Text @map("description")
  reportStatus ReportStatus @map("report_status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  customer Customer @relation(fields: [customerId], references: [id])
  admin    Admin?   @relation(fields: [adminId], references: [id])

  @@index([reportStatus])
  @@index([reportType])

  @@map("report")
}